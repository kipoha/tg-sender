from asgiref.sync import async_to_sync

from django import forms
from django.core.cache import cache

from telegram_sender.models import TelegramAccount
from telegram_sender.utils import create_client

from telethon.errors import PhoneCodeInvalidError, SessionPasswordNeededError, PhoneCodeExpiredError, PhoneCodeEmptyError

async def verify_telegram_code(phone_number, code) -> tuple[bool, str]:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∫–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é"""
    client = create_client(phone_number)

    await client.connect()
    if not await client.is_user_authorized():
        try:
            phone_code_hash = cache.get(phone_number)
            if not phone_code_hash:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω phone_code_hash")
                return False, "–ù–µ –Ω–∞–π–¥–µ–Ω phone_code_hash"

            await client.sign_in(phone_number, code, phone_code_hash=phone_code_hash)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è {phone_number}")
            client.disconnect()
            return True, "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
        except PhoneCodeInvalidError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!")
            client.disconnect()
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!"
        except SessionPasswordNeededError:
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
            client.disconnect()
            return False, "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!"
        except PhoneCodeExpiredError:
            print("‚ùå –ö–æ–¥ –∏—Å—Ç–µ–∫!")
            client.disconnect()
            return False, "–ö–æ–¥ –∏—Å—Ç–µ–∫! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –±–µ–∑ –∫–æ–¥–∞."
        except PhoneCodeEmptyError:
            print("‚ùå –ö–æ–¥ –ø—É—Å—Ç–æ–π!")
            client.disconnect()
            return False, "–ö–æ–¥ –ø—É—Å—Ç–æ–π!"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            client.disconnect()
            return False, f"‚ùå –û—à–∏–±–∫–∞: {e}"
    else:
        print("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
        client.disconnect()
        return True, "–£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!"


async def send_telegram_code(phone_number):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç phone_code_hash"""
    client = create_client(phone_number)

    await client.connect()
    if not await client.is_user_authorized():
        sent_code = await client.send_code_request(phone_number)
        cache.set(phone_number, sent_code.phone_code_hash, 300)
        print(f"üì≤ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone_number}")
        client.disconnect()
        return sent_code.phone_code_hash



class TelegramAccountForm(forms.ModelForm):
    code = forms.CharField(label="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", max_length=10, required=False)

    class Meta:
        model = TelegramAccount
        fields = ["phone_number", "session_name", "code"]

    def clean_code(self):
        code = self.cleaned_data.get("code")
        phone_number = self.cleaned_data.get("phone_number")
        if not code:
            hash_ = async_to_sync(send_telegram_code)(phone_number)
            if not hash_:
                self.add_error("code", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        elif code:
            success, message = async_to_sync(verify_telegram_code)(phone_number, code)
            if not success:
                self.add_error("code", str(message))
            else:
                try:
                    account = TelegramAccount.objects.get(phone_number=phone_number)
                    account.is_active = True
                    account.save()
                except TelegramAccount.DoesNotExist:
                    pass


        return code

    def save(self, commit=True):
        instance = super().save(commit=False)
        if commit:
            instance.save()
        return instance


